const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys.js');

const User = mongoose.model('users'); //one argument, fetch the model class

//automatically called by passport with user model just fetched from Mongo
//turn user to user id and store in session
passport.serializeUser((user, done) => {
  done(null, user.id); //id generated by mongo
});

//when have request, take header attached by browser
//turn id back to user
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    //【import!】user object attaches to the request as req.user
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret, //find in dev google acount
      callbackURL: '/auth/google/callback',
      proxy: true
    },
    //executed after callback
    //do something with the profile that got back
    //from gg in the callback function (in passport)
    //argument list as documentation
    async (accessToken, refreshToken, profile, done) => {
      //query return a promise
      const existingUser = await User.findOne({ googleId: profile.id });
      if (existingUser) {
        //done method: error object,
        return done(null, existingUser);
      }
      //create instance of a record
      const user = await new User({ googleId: profile.id }).save();
      done(null, user);
    }
  )
);
