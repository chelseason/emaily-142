const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const mongoose = require('mongoose');
const keys = require('../config/keys.js');

const User = mongoose.model('users');//one argument, fetch the model class

//turn user to user id and store in session
passport.serializeUser((user, done) => {
    done(null, user.id); //id generated by mongo
});

//turn id back to user
passport.deserializeUser((id, done) => {
    User.findById(id)
        .then(user => {
            done(null, user);
        })
});

passport.use(
    new GoogleStrategy(
        {
        clientID: keys.googleClientID,
        clientSecret: keys.googleClientSecret,
        callbackURL: '/auth/google/callback',
        proxy: true
        }, 
        async (accessToken, refreshToken, profile, done )=> {
            //query return a promise
            const existingUser = await User.findOne({ googleId: profile.id})
            if (existingUser) {
                return done(null, existingUser);
            } 
            //create instance of a record
            const user = await new User({ googleId: profile.id}).save()
            done(null, user)
        }
    )
);

